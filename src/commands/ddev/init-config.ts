import { appInstallationArgs } from "../../lib/app/flags.js";
import { ExtendedBaseCommand } from "../../ExtendedBaseCommand.js";
import yaml from "js-yaml";
import { assertStatus, MittwaldAPIV2 } from "@mittwald/api-client";
import { Flags } from "@oclif/core";
import AppAppInstallation = MittwaldAPIV2.Components.Schemas.AppAppInstallation;
import AppLinkedDatabase = MittwaldAPIV2.Components.Schemas.AppLinkedDatabase;

type SystemSoftwareVersions = Record<string, string>;

export class InitConfig extends ExtendedBaseCommand<typeof InitConfig> {
  static summary = "Initialize a new ddev configuration";
  static description =
    "This command initializes a new ddev configuration in the current directory.";

  static flags = {
    "override-type": Flags.string({
      summary: "Override the type of the generated DDEV configuration",
      description:
        "The type of the generated DDEV configuration; this can be any of the documented DDEV project types, or 'auto' (which is also the default) for automatic discovery." +
        "" +
        "See https://ddev.readthedocs.io/en/latest/users/configuration/config/#type for more information",
    }),
  };

  static args = {
    ...appInstallationArgs,
  };

  public async run(): Promise<void> {
    const ddevConfig: Record<string, any> = {};

    const appInstallation = await this.withAppInstallation();
    const systemSoftwares = await this.buildSystemSoftwareVersionMap(
      appInstallation,
    );

    ddevConfig["override_config"] = true;
    ddevConfig["webserver_type"] = "apache-fpm";
    ddevConfig["php_version"] = this.determinePHPVersion(systemSoftwares);
    ddevConfig["web_environment"] = [
      `MITTWALD_APP_INSTALLATION_ID=${appInstallation.shortId}`,
    ];

    const database = await this.determineDatabaseVersion(appInstallation);
    if (database) {
      ddevConfig["database"] = database;
    }

    if (appInstallation.customDocumentRoot) {
      ddevConfig["docroot"] = appInstallation.customDocumentRoot;
    }

    console.log(
      `# DDEV configuration for mittwald app installation '${appInstallation.shortId}'`,
    );
    console.log("# generated by 'mw ddev init-config'");
    console.log(yaml.dump(ddevConfig));
  }

  private async determineDatabaseVersion(inst: AppAppInstallation): Promise<
    | {
        type: string;
        version: string;
      }
    | undefined
  > {
    const isPrimary = (db: AppLinkedDatabase) => db.purpose === "primary";
    const primary = (inst.linkedDatabases || []).find(isPrimary);

    if (primary?.kind === "mysql") {
      const r = await this.apiClient.database.getMysqlDatabase({
        mysqlDatabaseId: primary.databaseId,
      });
      assertStatus(r, 200);

      return {
        type: "mysql",
        version: r.data.version,
      };
    }

    return undefined;
  }

  private determinePHPVersion(
    systemSoftwareVersions: SystemSoftwareVersions,
  ): string | undefined {
    if (!("php" in systemSoftwareVersions)) {
      return undefined;
    }

    const version = systemSoftwareVersions["php"];
    const [major, minor] = version.split(".");

    return `${major}.${minor}`;
  }

  private async buildSystemSoftwareVersionMap(
    inst: AppAppInstallation,
  ): Promise<SystemSoftwareVersions> {
    const versionMap: SystemSoftwareVersions = {};

    for (const {
      systemSoftwareId,
      systemSoftwareVersion,
    } of inst.systemSoftware || []) {
      const systemSoftwareResponse = await this.apiClient.app.getSystemsoftware(
        {
          systemSoftwareId,
        },
      );
      assertStatus(systemSoftwareResponse, 200);

      const systemSoftwareVersionResponse =
        await this.apiClient.app.getSystemsoftwareversion({
          systemSoftwareId,
          systemSoftwareVersionId: systemSoftwareVersion.desired,
        });
      assertStatus(systemSoftwareVersionResponse, 200);

      const systemSoftware = systemSoftwareResponse.data;
      const version = systemSoftwareVersionResponse.data;

      versionMap[systemSoftware.name] = version.externalVersion;
    }

    return versionMap;
  }

  private async withAppInstallation(): Promise<AppAppInstallation> {
    const appInstallationId = await this.withAppInstallationId(InitConfig);
    const r = await this.apiClient.app.getAppinstallation({
      appInstallationId,
    });

    assertStatus(r, 200);
    return r.data;
  }
}
